# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
# index
GET     /                           @controllers.ApplicationController.index()


# API
GET     /api/v1/children            @controllers.PersonController.children()
GET     /api/v1/children/:id        @controllers.PersonController.child(id: Long)
POST    /api/v1/children/add        @controllers.PersonController.addChild()
DELETE  /api/v1/children/:id        @controllers.PersonController.removeChild(id: Long)

GET     /api/v1/profile             @controllers.PersonController.profile()

#Standards
GET     /api/v1/standards           @controllers.StandardsController.list()
GET     /api/v1/standards/:id       @controllers.StandardsController.view(id: Long)
POST    /api/v1/standards           @controllers.StandardsController.create()
PUT     /api/v1/standards/:id       @controllers.StandardsController.update(id: Long)
DELETE  /api/v1/standards/:id       @controllers.StandardsController.delete(id: Long)

#Standards
GET     /api/v2/standards           @controllers.StandardsController.list()
GET     /api/v2/standards/:id       @controllers.StandardsController.viewV2(id: Long)
POST    /api/v2/standards           @controllers.StandardsController.createV2()


#Statements
GET     /api/v1/standards/:id/statements              @controllers.StandardsController.getStatementsForStandard(id: Long)
POST    /api/v1/standards/:id/statements              @controllers.StandardsController.createStatement(id: Long)
PUT     /api/v1/standards/:id/statements              @controllers.StandardsController.updateStatement(id: Long)
DELETE  /api/v1/standards/:id/statement/:stateId      @controllers.StandardsController.deleteStatement(id: Long, stateId: Long)


#Questions
GET   /api/v1/questions                               @controllers.QuestionsController.list
POST  /api/v1/questions                               @controllers.QuestionsController.create
GET   /api/v1/questions/:id                           @controllers.QuestionsController.get(id: Long)


#Dummy
GET     /api/v1/dummies             @controllers.DummyController.listDummies()




# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
GET     /assets/securesocial/*file  securesocial.controllers.Assets.at(path="/public/securesocial", file)

# Login page(s)
GET     /logout                     @securesocial.controllers.LoginPage.logout
GET     /login                      @securesocial.controllers.LoginPage.login
#GET     /custom/authenticate/:provider @controllers.CustomAuthController.authenticate(provider)

# User Registration and password handlingGET     /signup                     @securesocial.controllers.Registration.startSignUp
GET     /signup                     @securesocial.controllers.Registration.startSignUp
POST    /signup                     @securesocial.controllers.Registration.handleStartSignUp
GET     /signup/:token              @securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              @securesocial.controllers.Registration.handleSignUp(token)

GET     /password                   @securesocial.controllers.PasswordChange.page
POST    /password                   @securesocial.controllers.PasswordChange.handlePasswordChange
GET     /reset                      @securesocial.controllers.PasswordReset.startResetPassword
POST    /reset                      @securesocial.controllers.PasswordReset.handleStartResetPassword

#
# Providers entry points
GET     /authenticate/:provider     @securesocial.controllers.ProviderController.authenticate(provider, redirectTo: Option[String])
POST    /authenticate/:provider     @securesocial.controllers.ProviderController.authenticateByPost(provider, redirectTo: Option[String])
POST    /api/authenticate/:provider @securesocial.controllers.LoginApi.authenticate(provider, builder = "token")

#->      /auth                       securesocial.Routes
